#!/usr/bin/python
# -*- coding: utf-8 -*-

#
# gPodder (a media aggregator / podcast client)
# Copyright (C) 2005-2007 Thomas Perl <thp at perli.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
# MA  02110-1301, USA.
#

"""
gPodder enables you to subscribe to RSS feeds and download
podcast episodes from these feeds. gPodder can operate in 
GUI mode and in CLI mode. Downloaded podcasts can either 
be synchronized to portable MP3 players (including iPods) 
or played back on the user's desktop.
"""

# PLEASE DO NOT CHANGE FORMAT OF __version__ LINE (setup.py reads this)

__author__    = "Thomas Perl <thp@perli.net>"
__version__   = "0.9.0+svn20070309"
__date__      = "2007-03-09"
__copyright__ = "Copyright (c) 2005-2007 %s. All rights reserved." % __author__
__licence__   = "GPL"

import sys,os
from optparse import OptionParser

import locale
import gettext

# gettext variables
APP = 'gpodder'
DIR = '/usr/share/locale/'

def main( argv = sys.argv):
    # Enable i18n support
    gettext.bindtextdomain( APP, DIR)
    gettext.textdomain( APP)
    gettext.install( APP)

    s_usage = 'usage: %%prog [options]\n\n%s' % ( __doc__.strip() )
    s_version = '%%prog %s' % ( __version__ )

    parser = OptionParser( usage = s_usage, version = s_version)

    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose", default=False,
                      help=_("Print debugging output to stdout"))

    parser.add_option("-t", "--local",
                      action="store_true", dest="local", default=False,
                      help=_("Run local version in current directory"))
    
    parser.add_option("-l", "--list",
                      action="store_true", dest="list", default=False,
                      help=_("List all channel subscriptions"))

    parser.add_option("-r", "--run",
                      action="store_true", dest="run", default=False,
                      help=_("Update channel list, download new podcasts"))

    parser.add_option("-u", "--update",
                      action="store_true", dest="update", default=False,
                      help=_("Update channel list and exit"))
    
    parser.add_option("-a", "--add", dest="add",
                      help=_("Subscribe to channel from URL"), metavar="URL")
    
    parser.add_option("-d", "--delete", dest="delete",
                      help=_("Delete channel specified by URL"), metavar="URL")


    (options, args) = parser.parse_args(argv)

    if options.local:
        sys.path = [ './src/', '../src/' ] + sys.path

    if options.verbose:
        from gpodder.liblogger import enable_verbose
        enable_verbose()

    # wget installation detection
    from gpodder import console
    which_wget = console.testForWget()
    if which_wget == "":
        print _("Error: cannot find wget.")
	return 20
    # which_wget
    
    if options.list:
        console.list_channels()
    elif options.run:
        console.run()
    elif options.update:
        console.update()
    elif options.add:
        console.add_channel( options.add)
    elif options.delete:
        console.del_channel( options.delete)
    else:
        #default run gui
        from gpodder import gpodder
        from gpodder.SimpleGladeApp import bindtextdomain
        import gtk.glade
        if options.local:
            gpodder.glade_dir = '../data'
            gpodder.locale_dir = 'data/locale/'
            gpodder.icon_dir = 'data/gpodder.png'
        bindtextdomain( 'gpodder', gpodder.locale_dir)
        gpodder.main( __version__)


if __name__ == "__main__":
    sys.exit( main())

